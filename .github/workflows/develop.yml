name: Develop CI/CD Pipeline

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

jobs:
  test:
    name: Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: scrumproject_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: mbstring, pdo, pdo_pgsql, xml, curl, zip
      
      - name: Copy .env
        run: cp .env.example .env
      
      - name: Install Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress
      
      - name: Generate key
        run: php artisan key:generate
      
      - name: Set up environment for testing
        run: |
          echo "DB_CONNECTION=pgsql" >> .env
          echo "DB_HOST=localhost" >> .env
          echo "DB_PORT=5432" >> .env
          echo "DB_DATABASE=scrumproject_test" >> .env
          echo "DB_USERNAME=postgres" >> .env
          echo "DB_PASSWORD=postgres" >> .env
      
      - name: Run migrations
        run: php artisan migrate --force
      
      - name: Create mock Vite manifest
        run: |
          mkdir -p public/build
          echo '{}' > public/build/manifest.json
      
      - name: Run PHPUnit tests
        run: php artisan test
  
  dusk-tests:
    name: Dusk Browser Tests
    runs-on: ubuntu-latest
    needs: test
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: scrumproject_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: mbstring, pdo, pdo_pgsql, xml, curl, zip
      
      - name: Copy .env
        run: cp .env.example .env
      
      - name: Install Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress
      
      - name: Generate key
        run: php artisan key:generate
      
      - name: Set up environment for Dusk
        run: |
          echo "DB_CONNECTION=pgsql" >> .env
          echo "DB_HOST=localhost" >> .env
          echo "DB_PORT=5432" >> .env
          echo "DB_DATABASE=scrumproject_test" >> .env
          echo "DB_USERNAME=postgres" >> .env
          echo "DB_PASSWORD=postgres" >> .env
          echo "APP_URL=http://127.0.0.1:8000" >> .env
      
      - name: Run migrations
        run: php artisan migrate --force
      
      - name: Create mock Vite manifest
        run: |
          mkdir -p public/build
          echo '{}' > public/build/manifest.json
      
      - name: Upgrade Chrome Driver
        run: php artisan dusk:chrome-driver --detect
      
      - name: Start Chrome Driver
        run: ./vendor/laravel/dusk/bin/chromedriver-linux &
      
      - name: Start Laravel Server
        run: php artisan serve &
        env:
          APP_URL: "http://127.0.0.1:8000"
      
      - name: Run Dusk Tests
        run: php artisan dusk
        env:
          APP_URL: "http://127.0.0.1:8000"
  
  deploy-to-develop:
    name: Deploy to Development
    needs: [test, dusk-tests]
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Terraform Init
        run: |
          cd terraform/environments/develop
          terraform init
      
      - name: Terraform Apply
        run: |
          cd terraform/environments/develop
          terraform apply -auto-approve
      
      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_USER: ec2-user
          EC2_HOST: ${{ secrets.DEVELOP_EC2_HOST }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          # Deploy using SSH
          ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_HOST << 'ENDSSH'
            cd /var/www/scrumproject
            git pull origin develop
            composer install --no-interaction --prefer-dist --optimize-autoloader
            php artisan migrate --force
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache
          ENDSSH